


-- tabela de usuarios
 CREATE TABLE if NOT EXISTS USUARIO(
   ID SERIAL PRIMARY KEY,
   NOME VARCHAR(100) NOT NULL,
  EMAIL VARCHAR(50)  NOT NULL UNIQUE,
   DATA_CADASTRO TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  );
  
   CREATE TABLE if NOT EXISTS EDITORA(
   ID SERIAL PRIMARY KEY,
   NOME VARCHAR(100) NOT NULL
   );
   
    CREATE TABLE if NOT EXISTS GENERO(
    ID SERIAL PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL UNIQUE
    );
    
     CREATE TABLE if NOT EXISTS LIVRO(
     ID SERIAL PRIMARY KEY,
     TITULO VARCHAR(150) NOT NULL,
     QUANTIDADE_DISPONIVEL INT NOT NULL CHECK(QUANTIDADE_DISPONIVEL >=0 ),
     ID_EDITORA INT NOT NULL,
     ID_GENERO INT NOT NULL,
      CONSTRAINT fk_EDITORA FOREIGN KEY(ID_EDITORA) REFERENCES EDITORA(ID) ON DELETE CASCADE,
      CONSTRAINT fk_GENERO FOREIGN KEY(ID_GENERO) REFERENCES GENERO(ID) ON DELETE CASCADE
      );
     
      CREATE TABLE if NOT EXISTS EMPRESTIMO(
      ID SERIAL PRIMARY KEY,
      ID_USUARIO INT NOT NULL,
      ID_LIVRO INT NOT NULL,
      DATA_EMPRESTIMO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      DATA_DEVOLUCAO TIMESTAMP NOT NULL,
      CONSTRAINT fk_EMPRESTIMO_USUARIO FOREIGN KEY(ID_USUARIO) REFERENCES USUARIO(ID) ON DELETE CASCADE,
      CONSTRAINT fk_EMPRESTIMO_LIVRO FOREIGN KEY(ID_LIVRO) REFERENCES LIVRO(ID) ON DELETE CASCADE
      );
      
      
      \dt;
      \d USUARIO;
      \d EDITORA;
      \d GENERO;
      \d LIVRO;
      \d EMPRESTIMO;
     
     --Adicionar um campo para armazenar o telefone dos usuarios
     ALTER TABLE USUARIO ADD COLUMN TELEFONE CHAR(11) DEFAULT 'NENHUM';
    -- \d USUARIO;
     
     --Altere o tamanho do campo titulo na tabela livros para comportar ate 200 cacateres.
     ALTER TABLE LIVRO ALTER COLUMN TITULO TYPE VARCHAR(200);
    -- \d LIVRO;
     
    -- Remova o campo data cadastro da tabela usuarios, pois ele não será mais utilizado.
    ALTER TABLE USUARIO DROP COLUMN DATA_CADASTRO;
    -- \d USUARIO;
    
    --Garanta que o mesmo titulo de livro não possa ser registrado na mesma editora.
    ALTER TABLE LIVRO ADD CONSTRAINT UQ_LIVRO_TITULO_EDITORA UNIQUE(TITULO, ID_EDITORA);
    -- \d LIVRO;
    
    --Garantir que as datas de emprestimo e devolução sejam distintas e validas.
    ALTER TABLE EMPRESTIMO ADD CONSTRAINT CHK_DATA_DEVOLUCAO CHECK(DATA_DEVOLUCAO >= DATA_EMPRESTIMO);
    -- \d EMPRESTIMO;
  
    INSERT INTO USUARIO(ID, NOME, EMAIL, TELEFONE)
    VALUES(1, 'Valtemir', 'Valtemir@senac.br', '9999-9999'),
    (2, 'Valtemir Junior', 'Valtemirjr@senac.br', '9999-9999');
    
    SELECT *FROM USUARIO;
    
    INSERT INTO EDITORA(ID, NOME)
    VALUES(1, 'SENAC'), (2, 'SENAC'), (3, 'MUNDO'), (4, 'DARK SIDE');
    SELECT *FROM EDITORA;
    
    INSERT INTO GENERO(ID, NOME)
    VALUES(1, 'TERROR'), (2, 'DRAMA'), (3, 'ROMANCE'), (4, 'FICCAO'), (5, 'INFANTIL');
    SELECT *FROM GENERO;
    
    INSERT INTO LIVRO(TITULO,QUANTIDADE_DISPONIVEL,ID_EDITORA,ID_GENERO)
    VALUES('OS OUTROS', 350, 1, 3),
    ('A VOLTA DOS QUE NÃO FORAM', 500, 2, 1),
    ('O ALPINISTA', 189, 2, 4),
    ('SAO PAULO', 800, 4, 2),
    ('A CABANA', 678, 3, 5);
    SELECT *FROM LIVRO;
    
      INSERT INTO EMPRESTIMO(ID_USUARIO,ID_LIVRO,DATA_DEVOLUCAO)
    VALUES
    (1, 4, '2024-12-06'),
    (1, 5, '2024-12-06');
    SELECT *FROM EMPRESTIMO;
    
    
    
    
    
